package tv.turbik.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import tv.turbik.dao.Episode;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EPISODE.
*/
public class EpisodeDao extends AbstractDao<Episode, Void> {

    public static final String TABLENAME = "EPISODE";

    /**
     * Properties of entity Episode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SeriesAlias = new Property(0, String.class, "seriesAlias", false, "SERIES_ALIAS");
        public final static Property Season = new Property(1, byte.class, "season", false, "SEASON");
        public final static Property Episode = new Property(2, byte.class, "episode", false, "EPISODE");
        public final static Property NameEn = new Property(3, String.class, "nameEn", false, "NAME_EN");
        public final static Property NameRu = new Property(4, String.class, "nameRu", false, "NAME_RU");
        public final static Property SmallPosterUrl = new Property(5, String.class, "smallPosterUrl", false, "SMALL_POSTER_URL");
        public final static Property Hash = new Property(6, String.class, "hash", false, "HASH");
        public final static Property MetaData = new Property(7, String.class, "metaData", false, "META_DATA");
    };


    public EpisodeDao(DaoConfig config) {
        super(config);
    }
    
    public EpisodeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EPISODE' (" + //
                "'SERIES_ALIAS' TEXT," + // 0: seriesAlias
                "'SEASON' INTEGER NOT NULL ," + // 1: season
                "'EPISODE' INTEGER NOT NULL ," + // 2: episode
                "'NAME_EN' TEXT NOT NULL ," + // 3: nameEn
                "'NAME_RU' TEXT," + // 4: nameRu
                "'SMALL_POSTER_URL' TEXT," + // 5: smallPosterUrl
                "'HASH' TEXT," + // 6: hash
                "'META_DATA' TEXT);"); // 7: metaData
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EPISODE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Episode entity) {
        stmt.clearBindings();
 
        String seriesAlias = entity.getSeriesAlias();
        if (seriesAlias != null) {
            stmt.bindString(1, seriesAlias);
        }
        stmt.bindLong(2, entity.getSeason());
        stmt.bindLong(3, entity.getEpisode());
        stmt.bindString(4, entity.getNameEn());
 
        String nameRu = entity.getNameRu();
        if (nameRu != null) {
            stmt.bindString(5, nameRu);
        }
 
        String smallPosterUrl = entity.getSmallPosterUrl();
        if (smallPosterUrl != null) {
            stmt.bindString(6, smallPosterUrl);
        }
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(7, hash);
        }
 
        String metaData = entity.getMetaData();
        if (metaData != null) {
            stmt.bindString(8, metaData);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Episode readEntity(Cursor cursor, int offset) {
        Episode entity = new Episode( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // seriesAlias
            (byte) cursor.getShort(offset + 1), // season
            (byte) cursor.getShort(offset + 2), // episode
            cursor.getString(offset + 3), // nameEn
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nameRu
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // smallPosterUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // hash
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // metaData
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Episode entity, int offset) {
        entity.setSeriesAlias(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSeason((byte) cursor.getShort(offset + 1));
        entity.setEpisode((byte) cursor.getShort(offset + 2));
        entity.setNameEn(cursor.getString(offset + 3));
        entity.setNameRu(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSmallPosterUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHash(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMetaData(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Episode entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Episode entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
