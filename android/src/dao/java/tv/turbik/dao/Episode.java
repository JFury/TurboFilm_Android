package tv.turbik.dao;

import de.greenrobot.dao.DaoException;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table EPISODE.
 */
public class Episode {

    private Long id;
    private byte season;
    private byte episode;
    /** Not-null value. */
    private String nameEn;
    private String nameRu;
    private String smallPosterUrl;
    private Long seriesId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient EpisodeDao myDao;

    private List<Video> videoList;

    public Episode() {
    }

    public Episode(Long id) {
        this.id = id;
    }

    public Episode(Long id, byte season, byte episode, String nameEn, String nameRu, String smallPosterUrl, Long seriesId) {
        this.id = id;
        this.season = season;
        this.episode = episode;
        this.nameEn = nameEn;
        this.nameRu = nameRu;
        this.smallPosterUrl = smallPosterUrl;
        this.seriesId = seriesId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEpisodeDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public byte getSeason() {
        return season;
    }

    public void setSeason(byte season) {
        this.season = season;
    }

    public byte getEpisode() {
        return episode;
    }

    public void setEpisode(byte episode) {
        this.episode = episode;
    }

    /** Not-null value. */
    public String getNameEn() {
        return nameEn;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNameEn(String nameEn) {
        this.nameEn = nameEn;
    }

    public String getNameRu() {
        return nameRu;
    }

    public void setNameRu(String nameRu) {
        this.nameRu = nameRu;
    }

    public String getSmallPosterUrl() {
        return smallPosterUrl;
    }

    public void setSmallPosterUrl(String smallPosterUrl) {
        this.smallPosterUrl = smallPosterUrl;
    }

    public Long getSeriesId() {
        return seriesId;
    }

    public void setSeriesId(Long seriesId) {
        this.seriesId = seriesId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Video> getVideoList() {
        if (videoList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VideoDao targetDao = daoSession.getVideoDao();
            List<Video> videoListNew = targetDao._queryEpisode_VideoList(id);
            synchronized (this) {
                if(videoList == null) {
                    videoList = videoListNew;
                }
            }
        }
        return videoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetVideoList() {
        videoList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
