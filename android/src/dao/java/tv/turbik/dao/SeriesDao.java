package tv.turbik.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import tv.turbik.dao.Series;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SERIES.
*/
public class SeriesDao extends AbstractDao<Series, Void> {

    public static final String TABLENAME = "SERIES";

    /**
     * Properties of entity Series.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Short.class, "id", false, "ID");
        public final static Property Alias = new Property(1, String.class, "alias", false, "ALIAS");
        public final static Property NameEn = new Property(2, String.class, "nameEn", false, "NAME_EN");
        public final static Property NameRu = new Property(3, String.class, "nameRu", false, "NAME_RU");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
        public final static Property SeasonsCount = new Property(5, Byte.class, "seasonsCount", false, "SEASONS_COUNT");
    };


    public SeriesDao(DaoConfig config) {
        super(config);
    }
    
    public SeriesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SERIES' (" + //
                "'ID' INTEGER," + // 0: id
                "'ALIAS' TEXT NOT NULL UNIQUE ," + // 1: alias
                "'NAME_EN' TEXT NOT NULL ," + // 2: nameEn
                "'NAME_RU' TEXT," + // 3: nameRu
                "'DESCRIPTION' TEXT," + // 4: description
                "'SEASONS_COUNT' INTEGER);"); // 5: seasonsCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SERIES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Series entity) {
        stmt.clearBindings();
 
        Short id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getAlias());
        stmt.bindString(3, entity.getNameEn());
 
        String nameRu = entity.getNameRu();
        if (nameRu != null) {
            stmt.bindString(4, nameRu);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        Byte seasonsCount = entity.getSeasonsCount();
        if (seasonsCount != null) {
            stmt.bindLong(6, seasonsCount);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Series readEntity(Cursor cursor, int offset) {
        Series entity = new Series( //
            cursor.isNull(offset + 0) ? null : cursor.getShort(offset + 0), // id
            cursor.getString(offset + 1), // alias
            cursor.getString(offset + 2), // nameEn
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nameRu
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // description
            cursor.isNull(offset + 5) ? null : (byte) cursor.getShort(offset + 5) // seasonsCount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Series entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getShort(offset + 0));
        entity.setAlias(cursor.getString(offset + 1));
        entity.setNameEn(cursor.getString(offset + 2));
        entity.setNameRu(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSeasonsCount(cursor.isNull(offset + 5) ? null : (byte) cursor.getShort(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Series entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Series entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
