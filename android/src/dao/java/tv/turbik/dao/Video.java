package tv.turbik.dao;

import java.util.List;
import tv.turbik.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table VIDEO.
 */
public class Video {

    private Long id;
    /** Not-null value. */
    private String lang;
    /** Not-null value. */
    private String quality;
    private int totalLength;
    private Long episodeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient VideoDao myDao;

    private List<VideoPart> videoPartList;

    public Video() {
    }

    public Video(Long id) {
        this.id = id;
    }

    public Video(Long id, String lang, String quality, int totalLength, Long episodeId) {
        this.id = id;
        this.lang = lang;
        this.quality = quality;
        this.totalLength = totalLength;
        this.episodeId = episodeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getVideoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getLang() {
        return lang;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setLang(String lang) {
        this.lang = lang;
    }

    /** Not-null value. */
    public String getQuality() {
        return quality;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setQuality(String quality) {
        this.quality = quality;
    }

    public int getTotalLength() {
        return totalLength;
    }

    public void setTotalLength(int totalLength) {
        this.totalLength = totalLength;
    }

    public Long getEpisodeId() {
        return episodeId;
    }

    public void setEpisodeId(Long episodeId) {
        this.episodeId = episodeId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<VideoPart> getVideoPartList() {
        if (videoPartList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VideoPartDao targetDao = daoSession.getVideoPartDao();
            List<VideoPart> videoPartListNew = targetDao._queryVideo_VideoPartList(id);
            synchronized (this) {
                if(videoPartList == null) {
                    videoPartList = videoPartListNew;
                }
            }
        }
        return videoPartList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetVideoPartList() {
        videoPartList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
